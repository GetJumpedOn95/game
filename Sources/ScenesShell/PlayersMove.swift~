import Scenes
import Igis
import Foundation
  /*
     This class is responsible for the interaction Layer.
     Internally, it maintains the RenderableEntities for this layer.
   */

class PlayersMove : RenderableEntity, KeyDownHandler {
 
    var defaultCanvasSize = Size()
    var playerPosition = 1
    var answer = "e"
    // var winningSpot = 30
    var winningSpot = 14
    var popupSize = Size(width:10, height:100)
    var answered = Bool(false)
    var response = "f"
    
    init() {
        // Using a meaningful name can be helpful for debugging
        super.init(name:"Interaction")
        insert(entity: player, at: .front)        
    }
    
    func start(canvas:Canvas) {
        var correct = Bool(true)
        //Start questions
        question1(canvas:canvas)
        waitForAnswer()
        correct = checkAnswer(canvas:canvas) 
        //set answered flag back to false
        answered = false
        correct = false
      /*  while(!correct) {
        question2(canvas:canvas)
        waitForAnswer()
        correct = checkAnswer(canvas:canvas)
        //set answered flag back to false
        answered = false
        }
       */
    }

    func waitForAnswer() {
        repeat {
            print("Sleeping")
            //sleep(1)
        }while (!answered)
        print("Answered = true")
    }

    func onKeyDown(key:String, code:String, ctrlKey:Bool, shiftKey:Bool, altKey:Bool, metaKey:Bool) {

        print("key: " + key + " code: " + code)
        if(key == "a" || key == "b" || key == "c" || key == "d") {
   
            response = key
        }
        answered = true
    }

    func checkAnswer(canvas:Canvas) -> Bool {

//         waitForAnswer()

        
        if(response != answer) {
           // popupWrong(canvas:canvas)
            return false
        }else{
           // popupCorrect(canvas:canvas)
            playerPosition = playerPosition + 1
            if(playerPosition == winningSpot) {
             //   popupWin(canvas:canvas)
            }else {
                player.moveForward(playerPosition:playerPosition, canvasSize:defaultCanvasSize)
            }
            return true
        }
    }
       
    override func preSetup(canvasSize: Size, canvas: Canvas) {
        player.move(to:Point(x: 50, y: 50))
        dispatcher.registerKeyDownHandler(handler: self)
        defaultCanvasSize = canvasSize
        print("setup canvas")
        start(canvas:canvas)
    }
    
    override func postTeardown() {
        dispatcher.unregisterKeyDownHandler(handler: self)
    }

    func clearBox(canvas:Canvas) {
        let clearRect = Rect(topLeft:Point(x:defaultCanvasSize.center.x, y:defaultCanvasSize.center.y), size:popupSize)
        let clearRectangle = Rectangle(rect:clearRect, fillMode:.clear)
        canvas.render(clearRectangle)
    }
    func popupWin(canvas:Canvas) {

        // Clear the entire canvas
        clearBox(canvas:canvas)
        
        let winRect = Rect(topLeft:Point(x:defaultCanvasSize.center.x, y:defaultCanvasSize.center.y), size:popupSize)
        let box = Rectangle(rect:winRect)   
        // Initialize objects
        let text = Text(location:Point(x:defaultCanvasSize.center.x + 5, y:defaultCanvasSize.center.y + 5), text:"Congratulations! You Win!!")
        text.font = "30pt Arial"
        canvas.render(text,box)
    }

    func popupCorrect(canvas:Canvas) {
        // Clear the entire canvas
        clearBox(canvas:canvas)
        let correctRect = Rect(topLeft:Point(x:defaultCanvasSize.center.x, y:defaultCanvasSize.center.y), size:popupSize)
        let box = Rectangle(rect:correctRect)
        // Initialize objects
        let text = Text(location:Point(x:defaultCanvasSize.center.x + 5, y:defaultCanvasSize.center.y + 5), text:"You move forward 1 space.")
        text.font = "30pt Arial"
        canvas.render(text,box)
    }
    func popupWrong(canvas:Canvas) {
        // Clear the entire canvasclearBox()
        clearBox(canvas:canvas)
        let wrongRect = Rect(topLeft:Point(x:defaultCanvasSize.center.x, y:defaultCanvasSize.center.y), size:popupSize)
        let box = Rectangle(rect:wrongRect)  
        // Initialize objects
        let text = Text(location:Point(x:defaultCanvasSize.center.x + 5, y:defaultCanvasSize.center.y + 5), text:"Sorry! You do not get to move forward")
        text.font = "30pt Arial"
        canvas.render(text, box)
    }
    func question1(canvas:Canvas) {
        clearBox(canvas:canvas)
        let questionRect = Rect(topLeft:Point(x:defaultCanvasSize.center.x, y:defaultCanvasSize.center.y), size:popupSize)
        let box = Rectangle(rect:questionRect) 
        let text = Text(location:Point(x:defaultCanvasSize.center.x - 300, y:defaultCanvasSize.center.y - 200), text:"Welcome to Oregon Dungeon. Do you enter the cave? Enter a for yes or b for no.")
        text.font = "15pt Arial"
        //set answer
        answer = "a"
        //canvas.render(text, box)  
    }
    func question2(canvas:Canvas) {
        clearBox(canvas:canvas)
        let questionRect = Rect(topLeft:Point(x:defaultCanvasSize.center.x, y:defaultCanvasSize.center.y), size:popupSize)
        box = Rectangle(rect:questionRect)
        text = Text(location:Point(x:defaultCanvasSize.center.x - 300, y:defaultCanvasSize.center.y - 200), text:"When you enter the cave, there is a monster.  Do you a) talk to him b) run away c) sneak past d) laugh")
        text.font = "15pt Arial"
        //set answer
        answer = "c"
        canvas.render(text, box)
    }

    override func render(canvas:Canvas){
        clearBox(canvas:canvas)
        canvas.render(text, box)
    }
}


